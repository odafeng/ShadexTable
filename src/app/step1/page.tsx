"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@clerk/nextjs";
import * as XLSX from "xlsx";
import Image from "next/image";
import Header from "@/components/ui/layout/Header_ui2";
import Footer from "@/components/Footer";
import StepNavigator from "@/components/stepNavigator";
import { useAnalysis } from "@/context/AnalysisContext";
import { typeColorClass } from "@/lib/constants";
import { ChevronDown, TableProperties, Shield, AlertTriangle, Info, CircleQuestionMark } from "lucide-react";
import ActionButton from "@/components/ActionButton";
import {
    Accordion,
    AccordionItem,
    AccordionTrigger,
    AccordionContent
} from "@/components/ui/accordion";
import { Tooltip, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip";
import ToggleSwitch from "@/components/ToggleSwitch";

import { SensitiveDataDetector } from "@/services/sensitiveDataDetector";
import { FileProcessor } from "@/utils/fileProcessor";
import { useUserLimits, useFileValidation } from "@/hooks/useUserLimits";
import DataPrivacyDialog from "./components/DataPrivacyDialog";
import {
    isAppError,
    ErrorCode,
    ErrorContext,
    createError,
    createErrorHandler,
    CommonErrors
} from "@/utils/error";
import { reportError } from "@/lib/apiClient";
import { AppError } from "@/types/errors";

const allowedExtensions = [".csv", ".xls", ".xlsx"];

interface ParsedDataRow {
    [key: string]: any;
}

interface ColumnProfile {
    column: string;
    missing_pct: string;
    suggested_type: string;
}

interface Step1PageProps { }

export default function Step1Page() {
    const router = useRouter();
    const { getToken, isSignedIn } = useAuth();
    const {
        parsedData,
        setFile: setCtxFile,
        setParsedData,
        setGroupVar: setCtxGroupVar,
        setCatVars: setCtxCatVars,
        setContVars: setCtxContVars,
        fillNA,
        setFillNA,
        setResultTable,
        setColumnTypes,
        setGroupCounts,
        setAutoAnalysisResult,
    } = useAnalysis();

    // Âü∫Êú¨ÁãÄÊÖã
    const [fileName, setFileName] = useState<string | null>(null);
    const [file, setFile] = useState<File | null>(null);
    const [pendingFile, setPendingFile] = useState<File | null>(null);
    const [error, setError] = useState<AppError | null>(null);
    const [loading, setLoading] = useState(false);
    const [dragOver, setDragOver] = useState(false);
    const [columnsPreview, setColumnsPreview] = useState<ColumnProfile[]>([]);
    const [showPreview, setShowPreview] = useState(false);
    const [autoMode, setAutoMode] = useState(false);
    const [columnAnalysisLoading, setColumnAnalysisLoading] = useState(false);

    // ÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨Áõ∏ÈóúÁãÄÊÖã
    const [showPrivacyDialog, setShowPrivacyDialog] = useState(false);
    const [sensitiveColumns, setSensitiveColumns] = useState<string[]>([]);
    const [privacySuggestions, setPrivacySuggestions] = useState<string[]>([]);
    const [fileValidationWarnings, setFileValidationWarnings] = useState<string[]>([]);
    const [fileBasicInfo, setFileBasicInfo] = useState<any>(null);
    const [sensitiveDetectionLoading, setSensitiveDetectionLoading] = useState(false);

    // Ê™îÊ°àÂ§ßÂ∞èÁõ∏ÈóúÁãÄÊÖã (‰ΩøÁî® hook)
    const limitsInfo = useUserLimits();
    const { validateFile, getFileSizeWarning } = useFileValidation();

    // ==========================================
    // Áµ±‰∏ÄÈåØË™§ËôïÁêÜÂô®
    const errorHandler = createErrorHandler((appError: AppError) => {
        setError(appError);

        // Ëá™ÂãïÊ∏ÖÈô§ÈùûÈóúÈçµÈåØË™§
        const isTemporaryError = [
            ErrorCode.NETWORK_ERROR,
            ErrorCode.RATE_LIMIT_ERROR
        ].includes(appError.code);

        if (isTemporaryError) {
            setTimeout(() => setError(null), 8000);
        }

        // Ë®òÈåÑÈåØË™§Âà∞Â§ñÈÉ®Á≥ªÁµ±
        reportError(appError, {
            step: "step1",
            component: "Step1Page",
            fileName: file?.name || pendingFile?.name,
            hasSensitiveData: sensitiveColumns.length > 0,
            autoMode,
            timestamp: new Date().toISOString()
        }).catch(console.warn);
    });

    const clearError = () => setError(null);

    // ==========================================
    // ÁîüÂëΩÈÄ±Êúü Effects
    useEffect(() => {
        getToken()
            .then((token) => {
                if (token) localStorage.setItem("__session", token);
            })
            .catch((err) => {
                errorHandler(CommonErrors.authTokenMissing(), "Áç≤ÂèñË™çË≠â‰ª§Áâå");
            });
    }, [getToken]);

    useEffect(() => {
        if (isSignedIn === false) {
            router.push("/sign-in");
        }
    }, [isSignedIn, router]);

    if (!isSignedIn) return null;

    // ==========================================
    // ÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨ËôïÁêÜ
    const handleSensitiveDataDetection = async (selectedFile: File) => {
        setSensitiveDetectionLoading(true);
        clearError();

        try {
            console.log(`üîç ÈñãÂßãÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨: ${selectedFile.name}`);

            // ‰ΩøÁî® SensitiveDataDetector Ê™¢Ê∏¨ÊïèÊÑüË≥áÊñô
            const sensitiveResult = await SensitiveDataDetector.checkFileForSensitiveData(selectedFile);

            if (sensitiveResult.error) {
                errorHandler(sensitiveResult.error, "ÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨");
                return false;
            }

            console.log(`üîí ÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨ÂÆåÊàê: ÁôºÁèæ ${sensitiveResult.sensitiveColumns.length} ÂÄãÊïèÊÑüÊ¨Ñ‰Ωç`);

            // Ë®≠ÁΩÆÊïèÊÑüË≥áÊñôÁõ∏ÈóúÁãÄÊÖã
            setSensitiveColumns(sensitiveResult.sensitiveColumns);
            setPrivacySuggestions(sensitiveResult.suggestions);

            // Ê∫ñÂÇôÊ™îÊ°àÂü∫Êú¨Ë≥áË®ä
            setFileBasicInfo({
                name: selectedFile.name,
                size: selectedFile.size,
                hasMultipleSheets: false // Â∞áÂú®Ê™îÊ°àËôïÁêÜÊôÇÊõ¥Êñ∞
            });

            return true;

        } catch (err: unknown) {
            console.error(`‚ùå ÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨Â§±Êïó:`, err);
            errorHandler(
                createError(
                    ErrorCode.PRIVACY_ERROR,
                    undefined,
                    undefined,
                    {
                        customMessage: "ÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨Â§±ÊïóÔºåË´ãÈáçË©¶",
                        cause: err instanceof Error ? err : undefined
                    }
                ),
                "ÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨"
            );
            return false;
        } finally {
            setSensitiveDetectionLoading(false);
        }
    };

    // ==========================================
    // Ê™îÊ°àËôïÁêÜ‰∏ªÂáΩÊï∏ (‰ΩøÁî® FileProcessor)
    const handleFileSelection = async (selectedFile: File) => {
        clearError();
        console.log(`üìÅ ÈñãÂßãËôïÁêÜÊ™îÊ°à: ${selectedFile.name} (${FileProcessor.formatFileSize(selectedFile.size)})`);

        // 1. ‰ΩøÁî® hook ÈÄ≤Ë°åÊ™îÊ°àÈ©óË≠â
        const validation = validateFile(selectedFile);
        if (!validation.isValid) {
            errorHandler(validation.error!, `Ê™îÊ°àÈ©óË≠â: ${selectedFile.name}`);
            return;
        }

        // 2. Ê™¢Êü•Ê™îÊ°àÂ§ßÂ∞èË≠¶Âëä
        const sizeWarning = getFileSizeWarning(selectedFile);
        const warnings: string[] = [];

        if (validation.warnings) {
            warnings.push(...validation.warnings);
        }

        if (sizeWarning) {
            warnings.push(sizeWarning);
        }

        setFileValidationWarnings(warnings);

        // 3. Ë®≠ÁΩÆÂæÖËôïÁêÜÊ™îÊ°à
        setPendingFile(selectedFile);

        // 4. ÈÄ≤Ë°åÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨
        const detectionSuccess = await handleSensitiveDataDetection(selectedFile);
        if (!detectionSuccess) {
            setPendingFile(null);
            return;
        }

        // 5. È°ØÁ§∫Èö±ÁßÅÂ∞çË©±Ê°Ü
        setShowPrivacyDialog(true);
    };

    // ==========================================
    // Èö±ÁßÅÂ∞çË©±Ê°ÜËôïÁêÜ
    const handlePrivacyConfirm = async () => {
        if (!pendingFile) {
            errorHandler(CommonErrors.fileNotSelected(), "Èö±ÁßÅÁ¢∫Ë™ç");
            return;
        }

        // Ê™¢Êü•ÊòØÂê¶ÊúâÊïèÊÑüË≥áÊñô
        if (sensitiveColumns.length > 0) {
            errorHandler(CommonErrors.sensitiveDataDetected(), "Èö±ÁßÅÁ¢∫Ë™ç - ÊúâÊïèÊÑüË≥áÊñô");
            return;
        }

        setShowPrivacyDialog(false);
        console.log(`‚úÖ Èö±ÁßÅÁ¢∫Ë™çÂÆåÊàêÔºåÈñãÂßãËôïÁêÜÊ™îÊ°à: ${pendingFile.name}`);

        try {
            await processFile(pendingFile);
            cleanupPendingState();
        } catch (err: unknown) {
            errorHandler(
                createError(
                    ErrorCode.PRIVACY_ERROR,
                    undefined,
                    'privacy.agreement_required',
                    {
                        customMessage: "Ê™îÊ°àËôïÁêÜÂ§±ÊïóÔºåË´ãÈáçË©¶",
                        cause: err instanceof Error ? err : undefined
                    }
                ),
                "Èö±ÁßÅÁ¢∫Ë™çÂæåÊ™îÊ°àËôïÁêÜ"
            );
        }
    };

    const handlePrivacyCancel = () => {
        console.log(`‚ùå Áî®Êà∂ÂèñÊ∂àÈö±ÁßÅÁ¢∫Ë™ç`);
        setShowPrivacyDialog(false);
        cleanupPendingState();

        // Ê∏ÖÈô§Ê™îÊ°àÈÅ∏Êìá
        const fileInput = document.getElementById('file-upload') as HTMLInputElement;
        if (fileInput) {
            fileInput.value = '';
        }
    };

    const cleanupPendingState = () => {
        setPendingFile(null);
        setSensitiveColumns([]);
        setPrivacySuggestions([]);
        setFileValidationWarnings([]);
        setFileBasicInfo(null);
    };

    // ==========================================
    // Ê™îÊ°àÂÖßÂÆπËôïÁêÜ (‰ΩøÁî® FileProcessor)
    const processFile = async (fileToProcess: File) => {
        setFile(fileToProcess);
        setFileName(fileToProcess.name);
        setShowPreview(false);
        setColumnsPreview([]);
        setColumnAnalysisLoading(false);

        try {
            console.log(`‚öôÔ∏è ÈñãÂßãËß£ÊûêÊ™îÊ°àÂÖßÂÆπ: ${fileToProcess.name}`);

            // ‰ΩøÁî® FileProcessor ËôïÁêÜÊ™îÊ°à
            const result = await FileProcessor.processFile(fileToProcess, limitsInfo.userType);

            if (result.error) {
                errorHandler(result.error, `Ê™îÊ°àËôïÁêÜ: ${fileToProcess.name}`);
                return;
            }

            if (result.data.length === 0) {
                const error = createError(
                    ErrorCode.FILE_ERROR,
                    ErrorContext.FILE_UPLOAD,
                    'file.empty_file'
                );
                errorHandler(error, `Ê™îÊ°àËôïÁêÜ: ${fileToProcess.name}`);
                return;
            }

            // Êõ¥Êñ∞Ê™îÊ°àÂü∫Êú¨Ë≥áË®ä
            setFileBasicInfo((prev: any) => ({
                ...prev,
                hasMultipleSheets: result.fileInfo?.hasMultipleSheets || false
            }));

            console.log(`üìä Ê™îÊ°àËß£ÊûêÊàêÂäüÔºåË≥áÊñôÁ≠ÜÊï∏: ${result.data.length}ÔºåÊ¨Ñ‰ΩçÊï∏: ${result.fileInfo?.columns || 0}`);
            setParsedData(result.data);

            // Á´ãÂç≥ÈÄ≤Ë°åÊ¨Ñ‰ΩçÂàÜÊûê
            await fetchColumnProfile(result.data);

        } catch (err: unknown) {
            console.error("‚ùå Ê™îÊ°àËôïÁêÜÈåØË™§:", err);
            const appError = createError(
                ErrorCode.FILE_ERROR,
                ErrorContext.FILE_UPLOAD,
                'file.read_failed',
                {
                    customMessage: `Ê™îÊ°àËôïÁêÜÂ§±Êïó: ${err instanceof Error ? err.message : String(err)}`,
                    cause: err instanceof Error ? err : undefined
                }
            );
            errorHandler(appError, `Ê™îÊ°àËôïÁêÜ: ${fileToProcess.name}`);
        }
    };

    // ==========================================
    // Ê¨Ñ‰ΩçÂàÜÊûê
    const fetchColumnProfile = async (data: any[]) => {
        setColumnAnalysisLoading(true);
        console.log(`üîç ÈñãÂßãÂàÜÊûêÊ¨Ñ‰ΩçÁâπÊÄßÔºåË≥áÊñôÁ≠ÜÊï∏: ${data.length}`);

        try {
            const token = localStorage.getItem("__session") || "";

            if (!token) {
                throw CommonErrors.authTokenMissing();
            }

            if (!process.env.NEXT_PUBLIC_API_URL) {
                throw createError(
                    ErrorCode.SERVER_ERROR,
                    ErrorContext.ANALYSIS,
                    undefined,
                    { customMessage: "API URL Êú™ÈÖçÁΩÆ" }
                );
            }

            const apiUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/preprocess/columns`;

            const res = await fetch(apiUrl, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({ data }),
            });

            if (!res.ok) {
                const errorText = await res.text();
                console.error("‚ùå API ÈåØË™§:", res.status, errorText);

                // Ê†πÊìö HTTP ÁãÄÊÖãÁ¢ºÂâµÂª∫ÈÅ©Áï∂ÁöÑÈåØË™§
                if (res.status === 401 || res.status === 403) {
                    throw CommonErrors.analysisAuthFailed();
                } else if (res.status >= 500) {
                    throw CommonErrors.serverError(ErrorContext.ANALYSIS);
                } else {
                    throw createError(
                        ErrorCode.ANALYSIS_ERROR,
                        ErrorContext.ANALYSIS,
                        'column.type_detection_failed',
                        { customMessage: `API ÈåØË™§: ${res.status} - ${errorText}` }
                    );
                }
            }

            const json = await res.json();

            if (json && json.data && json.data.columns && Array.isArray(json.data.columns)) {
                console.log(`‚úÖ Ê¨Ñ‰ΩçÂàÜÊûêÊàêÂäüÔºåÁôºÁèæ ${json.data.columns.length} ÂÄãÊúâÊïàÊ¨Ñ‰Ωç`);
                setColumnsPreview(json.data.columns);
                setColumnTypes(json.data.columns);
                setShowPreview(true);
            } else {
                console.warn("‚ö†Ô∏è API ÂõûÊáâÊ†ºÂºèÁï∞Â∏∏Ôºå‰ΩøÁî®ÂÇôÁî®ÊñπÊ°à");
                createFallbackColumnData(data);
            }

        } catch (err: unknown) {
            console.error("‚ùå Ê¨Ñ‰ΩçËß£ÊûêÈåØË™§:", err);

            if (err instanceof isAppError) {
                errorHandler(err, "Ê¨Ñ‰ΩçÂàÜÊûê");
            } else {
                errorHandler(
                    createError(
                        ErrorCode.ANALYSIS_ERROR,
                        ErrorContext.ANALYSIS,
                        'column.type_detection_failed',
                        {
                            customMessage: `Ê¨Ñ‰ΩçËß£ÊûêÂ§±Êïó: ${err instanceof Error ? err.message : String(err)}`,
                            cause: err instanceof Error ? err : undefined
                        }
                    ),
                    "Ê¨Ñ‰ΩçÂàÜÊûê"
                );
            }

            // ‰ΩøÁî®ÂÇôÁî®ÊñπÊ°à
            createFallbackColumnData(data);
        } finally {
            setColumnAnalysisLoading(false);
        }
    };

    // ÂÇôÁî®ÊñπÊ°àÔºöÂâµÂª∫Âü∫Êú¨ÁöÑÊ¨Ñ‰ΩçË≥áË®ä
    const createFallbackColumnData = (data: any[]) => {
        if (data.length === 0) return;

        const columns: ColumnProfile[] = Object.keys(data[0]).map(col => ({
            column: col,
            missing_pct: "0.0%",
            suggested_type: "‰∏çÊòé"
        }));

        setColumnsPreview(columns);
        setShowPreview(true);
    };

    // ==========================================
    // ÂàÜÊûêËôïÁêÜÂáΩÊï∏
    const handleAnalyze = async () => {
        if (!file) {
            errorHandler(CommonErrors.fileNotSelected(), "ÂàÜÊûêÊåâÈàïÈªûÊìä");
            return;
        }

        clearError();

        try {
            if (autoMode) {
                await handleAutoAnalyze();
            } else {
                await handleManualAnalyze();
            }
        } catch (err: unknown) {
            if (err instanceof Error && err.message.includes('timeout')) {
                errorHandler(CommonErrors.analysisTimeout(), "ÂàÜÊûêËôïÁêÜË∂ÖÊôÇ");
            } else if (err instanceof Error && err.message.includes('unauthorized')) {
                errorHandler(CommonErrors.analysisAuthFailed(), "ÂàÜÊûêÊéàÊ¨äÂ§±Êïó");
            } else {
                errorHandler(err, "ÂàÜÊûêËôïÁêÜ");
            }
        }
    };

    const handleManualAnalyze = async () => {
        setLoading(true);
        setCtxFile(file);
        setAutoAnalysisResult(null);

        try {
            await new Promise(resolve => setTimeout(resolve, 1000));
            setLoading(false);
            router.push("/step2");
        } catch (err: unknown) {
            errorHandler(
                createError(
                    ErrorCode.ANALYSIS_ERROR,
                    ErrorContext.ANALYSIS,
                    undefined,
                    {
                        customMessage: "ÂçäËá™ÂãïÂàÜÊûêÂàùÂßãÂåñÂ§±ÊïóÔºåË´ãÈáçË©¶",
                        cause: err instanceof Error ? err : undefined
                    }
                ),
                "ÂçäËá™ÂãïÂàÜÊûê"
            );
            setLoading(false);
        }
    };

    const handleAutoAnalyze = async () => {
        if (!file || parsedData.length === 0) {
            errorHandler(CommonErrors.fileNotSelected(), "Ëá™ÂãïÂàÜÊûê");
            return;
        }

        setLoading(true);
        setCtxFile(file);

        try {
            const token = await getToken();
            if (!token) {
                throw CommonErrors.analysisAuthFailed();
            }

            const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/ai_automation/auto-analyze`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({
                    parsedData: parsedData,
                    fillNA: fillNA
                }),
            });

            if (!response.ok) {
                if (response.status === 401 || response.status === 403) {
                    throw CommonErrors.analysisAuthFailed();
                } else if (response.status >= 500) {
                    throw CommonErrors.serverError(ErrorContext.ANALYSIS);
                } else {
                    const errorData = await response.json();
                    throw createError(
                        ErrorCode.ANALYSIS_ERROR,
                        ErrorContext.ANALYSIS,
                        'analysis.auto_failed',
                        { customMessage: errorData.detail || `API ÈåØË™§: ${response.status}` }
                    );
                }
            }

            const result = await response.json();

            if (!result.success) {
                throw createError(
                    ErrorCode.ANALYSIS_ERROR,
                    ErrorContext.ANALYSIS,
                    'analysis.auto_failed',
                    { customMessage: result.message || "Ëá™ÂãïÂàÜÊûêÂ§±Êïó" }
                );
            }

            // Êõ¥Êñ∞ context ÁãÄÊÖã
            setCtxGroupVar(result.group_var || "");
            setCtxCatVars(result.cat_vars || []);
            setCtxContVars(result.cont_vars || []);
            setAutoAnalysisResult(result);

            if (result.analysis?.table) {
                setResultTable(result.analysis.table);
            }

            if (result.analysis?.groupCounts) {
                setGroupCounts(result.analysis.groupCounts);
            }

            router.push("/step3");

        } catch (err: unknown) {
            console.error("‚ùå Ëá™ÂãïÂàÜÊûêÂ§±Êïó:", err);

            if (err instanceof isAppError) {
                errorHandler(err, "AI Ëá™ÂãïÂàÜÊûê");
            } else {
                errorHandler(
                    createError(
                        ErrorCode.ANALYSIS_ERROR,
                        ErrorContext.ANALYSIS,
                        'analysis.auto_failed',
                        {
                            customMessage: `Ëá™ÂãïÂàÜÊûêÂ§±Êïó: ${err instanceof Error ? err.message : String(err)}`,
                            cause: err instanceof Error ? err : undefined
                        }
                    ),
                    "AI Ëá™ÂãïÂàÜÊûê"
                );
            }
        } finally {
            setLoading(false);
        }
    };

    // ==========================================
    // ÈáçË©¶ÂáΩÊï∏
    const handleRetryColumnAnalysis = async () => {
        if (parsedData.length > 0) {
            clearError();
            console.log(`üîÑ ÈáçË©¶Ê¨Ñ‰ΩçÂàÜÊûê`);
            await fetchColumnProfile(parsedData);
        }
    };

    // ==========================================
    // ‰∫ã‰ª∂ËôïÁêÜ
    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const selectedFile = e.target.files?.[0];
        if (selectedFile) handleFileSelection(selectedFile);
    };

    const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        setDragOver(false);
        const selectedFile = e.dataTransfer.files?.[0];
        if (selectedFile) handleFileSelection(selectedFile);
    };

    const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        setDragOver(true);
    };

    const handleDragLeave = () => setDragOver(false);

    // ==========================================
    // ÂèñÂæóÁî®Êà∂ÈôêÂà∂Ë≥áË®ä (Â∑≤Áî± hook Êèê‰æõÔºåÁßªÈô§Ê≠§ÂáΩÊï∏)

    // ==========================================
    // ÈåØË™§È°ØÁ§∫ÂÖÉ‰ª∂
    const ErrorDisplay = () => {
        if (!error) return null;

        const getSeverityColor = () => {
            switch (error.code) {
                case ErrorCode.PRIVACY_ERROR:
                    return "bg-red-50 border-red-200 text-red-800";
                case ErrorCode.AUTH_ERROR:
                    return "bg-blue-50 border-blue-200 text-blue-800";
                case ErrorCode.NETWORK_ERROR:
                case ErrorCode.RATE_LIMIT_ERROR:
                    return "bg-yellow-50 border-yellow-200 text-yellow-800";
                default:
                    return "bg-red-50 border-red-200 text-red-800";
            }
        };

        return (
            <div className={`mb-4 p-4 rounded-lg border ${getSeverityColor()}`}>
                <div className="flex items-center gap-2 mb-2">
                    {error.code === ErrorCode.PRIVACY_ERROR && <Shield className="w-5 h-5" />}
                    {error.code === ErrorCode.AUTH_ERROR && <Shield className="w-5 h-5" />}
                    {(error.code === ErrorCode.NETWORK_ERROR || error.code === ErrorCode.RATE_LIMIT_ERROR) && <AlertTriangle className="w-5 h-5" />}
                    <span className="font-medium">ÁôºÁîüÈåØË™§</span>
                    {error.correlationId && (
                        <span className="text-xs opacity-60">#{error.correlationId.slice(-8)}</span>
                    )}
                </div>
                <p className="text-sm mb-3">{error.userMessage}</p>
                <p className="text-xs mb-3 opacity-80">Âª∫Ë≠∞Âãï‰ΩúÔºö{error.action}</p>
                <div className="flex gap-2">
                    <button
                        onClick={clearError}
                        className="px-3 py-1 bg-white/20 hover:bg-white/30 rounded text-sm transition-colors"
                    >
                        ÈóúÈñâ
                    </button>
                    {error.context === ErrorContext.ANALYSIS && (
                        <button
                            onClick={handleRetryColumnAnalysis}
                            className="px-3 py-1 bg-white/20 hover:bg-white/30 rounded text-sm transition-colors"
                        >
                            ÈáçË©¶
                        </button>
                    )}
                </div>
            </div>
        );
    };

    const isLoading = loading || sensitiveDetectionLoading;

    // ==========================================
    // ‰∏ªË¶ÅÊ∏≤Êüì
    return (
        <div className="bg-white">
            <Header />
            <div className="container-custom pt-[70px] lg:pt-[110px] pb-2 lg:pb-45">
                <StepNavigator />

                {/* Ê®ôÈ°å */}
                <h2
                    style={{
                        letterSpacing: "3px",
                        lineHeight: "42px",
                        fontFamily: '"Noto Sans TC", "ÊÄùÊ∫êÈªëÈ´î", sans-serif',
                        color: "#0F2844",
                    }}
                    className="text-[26px] lg:text-[30px] mt-0 lg:mt-4 mb-4"
                >
                    Step1Ôºö‰∏äÂÇ≥Ë≥áÊñôÊ™îÊ°à
                </h2>

                {/* Ê™îÊ°àÈôêÂà∂Ë≠¶Ë™û */}
                <div className="mb-4 text-center">
                    <span className="inline-flex items-center px-3 py-1 bg-gray-100 text-sm text-gray-700 rounded-full">
                        {limitsInfo.formattedLimits.userTypeName}: {limitsInfo.formattedLimits.maxSize} ‚Ä¢ {limitsInfo.formattedLimits.maxRows} Á≠Ü ‚Ä¢ {limitsInfo.formattedLimits.maxColumns} Ê¨Ñ‰Ωç
                        {limitsInfo.canUpgradeFile && <span className="ml-2 text-blue-600">‚Üó ÂçáÁ¥ö</span>}
                    </span>
                </div>

                {/* Èö±ÁßÅÊèêÈÜí */}
                <div className="flex items-start gap-2 mb-8 text-[18px] lg:text-[20px]">
                    <Shield className="w-6 h-6 text-[#0F2844] mt-1" />
                    <div>
                        <p
                            style={{
                                letterSpacing: "2px",
                                lineHeight: "32px",
                                fontFamily: '"Noto Sans TC", "ÊÄùÊ∫êÈªëÈ´î", sans-serif',
                                color: "#0F2844",
                            }}
                            className="mb-2"
                        >
                            <strong>Èö±ÁßÅ‰øùË≠∑ÊèêÈÜíÔºö</strong>Ë´ãÂãôÂøÖÁßªÈô§ÊâÄÊúâÂÄãË≥áÊ¨Ñ‰Ωç(Â¶ÇÂßìÂêç„ÄÅÁóÖÊ≠∑Ëôü„ÄÅÁîüÊó•Á≠â)ÔºåÈÅøÂÖçÈÅïÂèçË≥áÊñôÂÆâÂÖ®Ë¶èÁØÑÔºÅ<br></br>Á≥ªÁµ±Â∞áËá™ÂãïÊ™¢Ê∏¨ÊïèÊÑüË≥áÊñô‰∏¶ÊèêÈÜíÊÇ®ÈÄ≤Ë°åËôïÁêÜ„ÄÇ
                        </p>
                    </div>
                </div>

                {/* ÈåØË™§Ë®äÊÅØÈ°ØÁ§∫ */}
                <ErrorDisplay />

                {/* ‰∏äÂÇ≥ÂçÄ */}
                <div
                    className={`w-full max-w-[1366px] h-[154px] border rounded-xl flex flex-col items-center justify-center space-y-4 transition-colors duration-200 ${dragOver ? "bg-[#dce3f1] border-blue-300" : "bg-[#EEF2F9] border-[#C4C8D0]"
                        }`}
                    onDrop={handleDrop}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                >
                    {/* Ê™îÊ°àÈÅ∏ÊìáÊ°Ü */}
                    <div className="max-w-[549px] max-h-[50px] flex items-center justify-between px-4 border border-[#C4C8D0] bg-white rounded-md relative group">
                        <div className="-mt-1 cursor-pointer">
                            <Tooltip>
                                <TooltipTrigger className="cursor-pointer text-[#0F2844] text-xl relative">
                                    <label
                                        htmlFor="file-upload"
                                        className="text-[#0F2844] text-[16px] lg:text-[20px] cursor-pointer hover:text-blue-600 transition-colors"
                                        style={{
                                            fontFamily: '"Noto Sans TC", "ÊÄùÊ∫êÈªëÈ´î", sans-serif',
                                            letterSpacing: "2px",
                                            lineHeight: "30px",
                                        }}
                                    >
                                        ÈÅ∏ÊìáÊ™îÊ°à
                                    </label>
                                </TooltipTrigger>
                                <TooltipContent>
                                    ÊîØÊè¥ExcelÊ™îÊ°à(.xlsx„ÄÅ.xls)ÂíåCSVÊ™îÊ°à(.csv)<br />
                                    {limitsInfo.formattedLimits.userTypeName} ÈôêÂà∂Ôºö{limitsInfo.formattedLimits.maxSize}Ôºå{limitsInfo.formattedLimits.maxRows} Á≠ÜË≥áÊñôÔºå{limitsInfo.formattedLimits.maxColumns} Ê¨Ñ‰Ωç<br />
                                    Á≥ªÁµ±Â∞áËá™ÂãïÊ™¢Ê∏¨ÊïèÊÑüË≥áÊñô‰∏¶ÈÄ≤Ë°åÈö±ÁßÅ‰øùË≠∑
                                </TooltipContent>
                            </Tooltip>
                        </div>

                        <span
                            className="truncate text-right"
                            style={{
                                fontFamily: '"Noto Sans TC", "ÊÄùÊ∫êÈªëÈ´î", sans-serif',
                                fontSize: "18px",
                                letterSpacing: "1.8px",
                                lineHeight: "30px",
                                color: fileName ? "#0F2844" : "#9CA3AF",
                                maxWidth: "320px",
                            }}
                        >
                            {fileName || "Êú™ÈÅ∏Êìá‰ªª‰ΩïÊ™îÊ°à"}
                        </span>

                        <input
                            type="file"
                            id="file-upload"
                            className="hidden"
                            accept=".csv,.xls,.xlsx"
                            onChange={handleFileChange}
                            disabled={isLoading}
                        />
                    </div>

                    {/* ÊãñÊõ≥ÊèêÁ§∫ÊñáÂ≠ó */}
                    <p
                        style={{
                            fontSize: "18px",
                            fontFamily: '"Noto Sans TC", "ÊÄùÊ∫êÈªëÈ´î", sans-serif',
                            color: "#5B6D81",
                        }}
                    >
                        ÊãñÊõ≥Ê™îÊ°àËá≥Ê≠§ÊàñÈªûÊìäÈÅ∏ÂèñÔºàÈôêÂà∂Ôºö{limitsInfo.formattedLimits.maxSize}Ôºâ
                    </p>

                    {/* ÊïèÊÑüË≥áÊñôÊ™¢Ê∏¨ËºâÂÖ•ÊåáÁ§∫ */}
                    {sensitiveDetectionLoading && (
                        <div className="flex items-center gap-2 text-sm text-blue-600">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                            üîç Ê≠£Âú®Ê™¢Ê∏¨ÊïèÊÑüË≥áÊñô...
                        </div>
                    )}
                </div>

                {/* Ë≥áÊñôÈ†êË¶ΩË°®Ê†º */}
                {parsedData.length > 0 && (
                    <div className="mt-10 lg:mt-16 space-y-2">
                        <div className="flex items-center gap-2">
                            <Image
                                src="/step1/checkbox_icon@2x.png"
                                alt="checkbox"
                                width={21.33}
                                height={20}
                                className="-mt-10 -mr-2 lg:-mt-6 lg-mr-0"
                            />
                            <p className="text-xs text-[#0F2844] -mt-4 mb-2">
                                ‰ª•‰∏ãÁÇ∫È†êË¶ΩË≥áÊñôÔºàÊúÄÂ§öÈ°ØÁ§∫Ââç‰∫îÂàóÔºâÔºö
                            </p>
                        </div>
                        <div className="overflow-auto border rounded-lg text-sm max-h-64 text-[#0F2844]">
                            <table className="min-w-full border-collapse text-left">
                                <thead className="bg-[#EEF2F9] text-[#586D81] sticky top-0 z-10">
                                    <tr>
                                        {Object.keys(parsedData[0]).map((key) => (
                                            <th key={key} className="px-3 py-2 border-b whitespace-nowrap">{key}</th>
                                        ))}
                                    </tr>
                                </thead>
                                <tbody>
                                    {parsedData.slice(0, 5).map((row: ParsedDataRow, i: number) => (
                                        <tr key={i} className="hover:bg-gray-50">
                                            {Object.keys(parsedData[0] as ParsedDataRow).map((col: string, j: number) => {
                                                const value: any = row[col];
                                                const displayValue = FileProcessor.formatDisplayValue(value);

                                                return (
                                                    <td key={j} className="px-3 py-2 border-b whitespace-nowrap">
                                                        {displayValue}
                                                    </td>
                                                );
                                            })}
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                )}

                {/* Ëá™ÂãïÊ¨Ñ‰ΩçËß£ÊûêÁµêÊûú */}
                {parsedData.length > 0 && (
                    <div className="mt-8 lg:mt-10">
                        {/* ËºâÂÖ•ÁãÄÊÖã */}
                        {columnAnalysisLoading && (
                            <div className="text-center p-6 bg-gray-50 rounded-lg">
                                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-3"></div>
                                <p className="text-gray-600">üîç Ê≠£Âú®ÂàÜÊûêÊ¨Ñ‰ΩçÁâπÊÄß...</p>
                                <p className="text-gray-500 text-sm mt-1">Á≥ªÁµ±Ê≠£Âú®Ëá™ÂãïË≠òÂà•Ë≥áÊñôÈ°ûÂûãÂíåÁµ±Ë®àÁâπÂæµ</p>
                            </div>
                        )}

                        {/* ÊàêÂäüÁãÄÊÖã - È°ØÁ§∫Ë°®Ê†º */}
                        {!columnAnalysisLoading && showPreview && columnsPreview.length > 0 && (
                            <Accordion type="multiple" defaultValue={["column-preview"]} className="w-full">
                                <AccordionItem value="column-preview">
                                    <AccordionTrigger
                                        className="text-[#0F2844] text-[20px] font-medium tracking-[1.5px] flex items-center justify-between group"
                                        style={{ fontFamily: '"Noto Sans TC", "ÊÄùÊ∫êÈªëÈ´î", sans-serif' }}
                                    >
                                        <div className="flex items-center gap-2">
                                            <TableProperties className="text-[#0F2844]" size={20} />
                                            <span className="cursor-pointer">
                                                Ëá™ÂãïÊ¨Ñ‰ΩçËß£ÊûêÁµêÊûú ({columnsPreview.length} ÂÄãÊ¨Ñ‰Ωç)
                                            </span>
                                            <ChevronDown className="h-5 w-5 text-[#0F2844] transition-transform duration-300 group-data-[state=open]:rotate-180 cursor-pointer" />
                                        </div>
                                    </AccordionTrigger>

                                    <AccordionContent className="mt-2">
                                        <div className="overflow-auto max-h-64 rounded-lg border">
                                            <table className="min-w-full text-sm">
                                                <thead className="bg-[#EEF2F9] sticky top-0 text-[#586D81] border-b border-gray-300">
                                                    <tr>
                                                        <th className="px-3 py-2 text-left whitespace-nowrap">Ê¨Ñ‰ΩçÂêçÁ®±</th>
                                                        <th className="px-3 py-2 text-left whitespace-nowrap">ÈÅ∫ÊºèÂÄºÊØî‰æã</th>
                                                        <th className="px-3 py-2 text-left whitespace-nowrap">Á≥ªÁµ±Âª∫Ë≠∞ÂûãÂà•</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    {columnsPreview.map((col, i) => (
                                                        <tr key={i} className="hover:bg-gray-50 border-b border-gray-200">
                                                            <td className="px-3 py-2 whitespace-nowrap text-[#0F2844]">
                                                                {col.column || `Ê¨Ñ‰Ωç ${i + 1}`}
                                                            </td>
                                                            <td className="px-3 py-2 whitespace-nowrap text-[#0F2844]">
                                                                {col.missing_pct || "‚Äì"}
                                                            </td>
                                                            <td
                                                                className={`px-3 py-2 whitespace-nowrap font-medium ${typeColorClass[col.suggested_type] || "text-gray-500"
                                                                    }`}
                                                            >
                                                                {col.suggested_type ?? "‰∏çÊòé"}
                                                            </td>
                                                        </tr>
                                                    ))}
                                                </tbody>
                                            </table>
                                        </div>
                                    </AccordionContent>
                                </AccordionItem>
                            </Accordion>
                        )}
                    </div>
                )}

                {/* Â°´Ë£úÁº∫ÂÄºÈÅ∏È†Ö */}
                {parsedData.length > 0 && (
                    <div className="flex items-center space-x-1 mt-6">
                        <input
                            type="checkbox"
                            id="fillna"
                            className="w-[25px] h-[25px] rounded-md border border-gray-400 bg-white checked:bg-[#0F2844] checked:border-[#0F2844] cursor-pointer disabled:opacity-50"
                            checked={fillNA}
                            onChange={(e) => setFillNA(e.target.checked)}
                            disabled={isLoading}
                        />
                        <label
                            htmlFor="fillna"
                            className={`text-[20px] text-[#555555] tracking-[2px] leading-[32px] font-bold cursor-pointer transition-opacity ${isLoading ? 'opacity-50' : ''
                                }`}
                        >
                            Â°´Ë£úÁº∫ÂÄº
                        </label>
                        <Tooltip>
                            <TooltipTrigger className="ml-0 text-gray-400 hover:text-gray-600">
                                <CircleQuestionMark className="mt-0.5" />
                            </TooltipTrigger>
                            <TooltipContent>
                                Ëá™ÂãïÂ°´Ë£úË≥áÊñô‰∏≠ÁöÑÁº∫Â§±ÂÄº<br />
                                Êï∏ÂÄºÂûãÔºö‰ΩøÁî®‰∏≠‰ΩçÊï∏/Âπ≥ÂùáÊï∏<br />
                                È°ûÂà•ÂûãÔºö‰ΩøÁî®ÁúæÊï∏
                            </TooltipContent>
                        </Tooltip>
                    </div>
                )}

                {/* Ê®°ÂºèÈÅ∏ÊìáÂíåÂàÜÊûêÊåâÈàï */}
                {parsedData.length > 0 && (
                    <div className="flex flex-col items-center gap-8 mt-8">
                        {/* AutoMode ÈñãÈóú */}
                        <div className="flex flex-col items-center gap-4">
                            <ToggleSwitch
                                checked={autoMode}
                                onCheckedChange={setAutoMode}
                                label="AI ÂÖ®Ëá™ÂãïÂàÜÊûêÊ®°Âºè"
                                size="sm"
                                className="justify-center"
                                labelClassName="text-[20px] font-bold tracking-[1px]"
                            />

                            {/* Ê®°ÂºèË™™Êòé */}
                            <div className="text-center">
                                <div className={`text-sm font-medium transition-all duration-300 ${autoMode ? 'text-blue-600' : 'text-gray-600'
                                    }`}>
                                    {autoMode
                                        ? "AI Â∞áËá™ÂãïÂÆåÊàêÊâÄÊúâÂàÜÊûêÊ≠•È©ü"
                                        : "ÊâãÂãïÊéßÂà∂ÊØèÂÄãÂàÜÊûêÊ≠•È©ü"
                                    }
                                </div>
                                <div className="text-xs text-gray-500 mt-1 max-w-md">
                                    {autoMode
                                        ? "ÂåÖÂê´Ë≥áÊñôÈ†êËôïÁêÜ„ÄÅËÆäÈ†ÖÈÅ∏Êìá„ÄÅÁµ±Ë®àÂàÜÊûêÁ≠âÔºå‰∏ÄÈçµÂÆåÊàêÂÖ®ÈÉ®ÊµÅÁ®ã"
                                        : "ÊÇ®ÂèØ‰ª•ÈÄêÊ≠•Ê™¢Ë¶ñÂíåË™øÊï¥ÂàÜÊûêÂèÉÊï∏ÔºåÂÆåÂÖ®ÊéåÊéßÂàÜÊûêÈÅéÁ®ã"
                                    }
                                </div>
                            </div>
                        </div>

                        {/* Áµ±‰∏ÄÁöÑÈñãÂßãÂàÜÊûêÊåâÈàï */}
                        <div className="flex justify-center">
                            <ActionButton
                                text={isLoading ? "ËôïÁêÜ‰∏≠..." : `ÈñãÂßã${autoMode ? ' AI ÂÖ®Ëá™Âãï' : ' ÂçäËá™Âãï'}ÂàÜÊûê`}
                                loading={isLoading}
                                disabled={!file || isLoading}
                                onClick={handleAnalyze}
                                iconSrc={autoMode ? "/step1/upload_white.png" : "/step1/upload_white.png"}
                                iconGraySrc="/step1/upload_gray.png"
                                iconHoverSrc={autoMode ? "/step1/upload_white.png" : "/step1/Group_50@2x.png"}
                                className={`min-w-[240px] w-auto transition-all duration-300 ${autoMode
                                        ? 'bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 hover:text-white'
                                        : ''
                                    } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''
                                    }`}
                            />
                        </div>

                        {/* ËºâÂÖ•ÁãÄÊÖã‰∏ãÁöÑÈ°çÂ§ñÊèêÁ§∫ */}
                        {isLoading && (
                            <div className="text-center text-sm text-gray-500">
                                <p>‚è±Ô∏è È†ê‰º∞ÊôÇÈñìÔºö{autoMode ? '30-60' : '5-10'} Áßí</p>
                                <p className="mt-1">
                                    {sensitiveDetectionLoading
                                        ? "Ê≠£Âú®ÈÄ≤Ë°åÈö±ÁßÅÊ™¢Ê∏¨ÔºåË´ãÁ®çÂÄô..."
                                        : "Ë´ãËÄêÂøÉÁ≠âÂÄôÔºåÁ≥ªÁµ±Ê≠£Âú®ËôïÁêÜÊÇ®ÁöÑË≥áÊñô..."
                                    }
                                </p>
                            </div>
                        )}
                    </div>
                )}
            </div>

            <Footer />

            {/* Èö±ÁßÅÂ∞çË©±Ê°Ü */}
            <DataPrivacyDialog
                open={showPrivacyDialog}
                onConfirm={handlePrivacyConfirm}
                onCancel={handlePrivacyCancel}
                sensitiveColumns={sensitiveColumns}
                suggestions={privacySuggestions}
                fileInfo={fileBasicInfo}
                warnings={fileValidationWarnings}
            />
        </div>
    );
}