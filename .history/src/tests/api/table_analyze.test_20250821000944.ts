// src/tests/api/table_analyze.test.ts
import { describe, it, expect, beforeAll } from 'vitest';
import { TableAnalyzeResponse } from '@/schemas/apiContracts';
import fs from 'fs';
import path from 'path';

const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8001';

async function getTestToken(): Promise<string> {
  if (process.env.TEST_AUTH_TOKEN) {
    return process.env.TEST_AUTH_TOKEN;
  }
  return 'test-token-for-development';
}

// CSV Ëß£ÊûêÂáΩÊï∏
function parseCSV(content: string): any[] {
  const lines = content.split('\n').filter(line => line.trim());
  if (lines.length === 0) return [];

  const headers = lines[0].split(',').map(h => h.trim());
  const data = [];

  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].split(',').map(v => v.trim());
    const row: any = {};

    headers.forEach((header, index) => {
      let value = values[index];

      if (!value || value === '' || value === 'null' || value === 'NULL') {
        row[header] = null;
      } else if (!isNaN(Number(value))) {
        row[header] = Number(value);
      } else {
        row[header] = value;
      }
    });

    data.push(row);
  }

  return data;
}

// ËºâÂÖ•Ê∏¨Ë©¶Ë≥áÊñôÂáΩÊï∏
function loadTestData() {
  const csvPath = path.join(process.cwd(), 'src/tests/fixtures/Shady_test.csv');

  if (!fs.existsSync(csvPath)) {
    console.error(`CSV Ê™îÊ°à‰∏çÂ≠òÂú®: ${csvPath}`);
    throw new Error(`Êâæ‰∏çÂà∞Ê∏¨Ë©¶Ë≥áÊñôÊ™îÊ°à: ${csvPath}`);
  }

  const csvContent = fs.readFileSync(csvPath, 'utf-8');
  return parseCSV(csvContent);
}

describe('Table Analyze API Tests', () => {
  let testData: any[];
  let authToken: string;

  beforeAll(async () => {
    try {
      testData = loadTestData();
      authToken = await getTestToken();
      console.log(`‚úÖ ÊàêÂäüËºâÂÖ•Ê∏¨Ë©¶Ë≥áÊñô: ${testData.length} Á≠Ü`);
    } catch (error) {
      console.error('‚ùå ËºâÂÖ•Ê∏¨Ë©¶Ë≥áÊñôÂ§±Êïó:', error);
      throw error;
    }
  });

  describe('Ê≠£Â∏∏ÊÉÖÊ≥ÅÊ∏¨Ë©¶', () => {
    it('ÊáâË©≤ÊàêÂäüÂü∑Ë°åÂü∫Êú¨ÁöÑÁµ±Ë®àÂàÜÊûê', async () => {
      const requestBody = {
        data: testData,
        group_col: 'Group',
        cat_vars: ['Sex', 'Region', 'Smoker'],
        cont_vars: ['Height_cm', 'Weight_kg', 'BMI', 'Cholesterol'],
        fillNA: false,
        enableExport: false,
        enableAI: false
      };

      console.log('üì§ ÁôºÈÄÅË´ãÊ±ÇÂà∞:', `${API_BASE}/api/table/table-analyze`);
      console.log('üìä Ë≥áÊñôÁ≠ÜÊï∏:', testData.length);
      console.log('üìù ÂàÜÁµÑËÆäÈ†Ö:', requestBody.group_col);
      console.log('üìù È°ûÂà•ËÆäÈ†Ö:', requestBody.cat_vars);
      console.log('üìù ÈÄ£Á∫åËÆäÈ†Ö:', requestBody.cont_vars);

      // È°ØÁ§∫ÂâçÂπæÁ≠ÜË≥áÊñô‰ª•Á¢∫Ë™çÊ†ºÂºè
      console.log('üìã Ë≥áÊñôÁØÑ‰æã (Ââç2Á≠Ü):', testData.slice(0, 2));

      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestBody)
      });

      console.log('üì• ÂõûÊáâÁãÄÊÖã:', response.status, response.statusText);
      console.log('üì• ÂõûÊáâ headers:', Object.fromEntries(response.headers.entries()));

      // ÁÑ°Ë´ñÊàêÂäüÊàñÂ§±ÊïóÈÉΩËÆÄÂèñÂõûÊáâ
      const contentType = response.headers.get('content-type');
      let responseData: any;

      if (contentType?.includes('application/json')) {
        responseData = await response.json();
        console.log('üì• ÂõûÊáâÂÖßÂÆπ (JSON):', JSON.stringify(responseData, null, 2));
      } else {
        responseData = await response.text();
        console.log('üì• ÂõûÊáâÂÖßÂÆπ (Text):', responseData);
      }

      // Ê†πÊìö‰∏çÂêåÁöÑÈåØË™§È°ûÂûãËôïÁêÜ
      if (!response.ok) {
        if (response.status === 401) {
          console.error('‚ùå Ë™çË≠âÈåØË™§ÔºöÈúÄË¶ÅÊúâÊïàÁöÑ token');
          console.log('üí° Âª∫Ë≠∞ÔºöÊ™¢Êü• .env.test ‰∏≠ÁöÑ TEST_AUTH_TOKEN');
          // Ë∑≥ÈÅéÊ∏¨Ë©¶ËÄå‰∏çÊòØÂ§±Êïó
          return;
        } else if (response.status === 422) {
          console.error('‚ùå Ë≥áÊñôÈ©óË≠âÈåØË™§Ôºö', responseData);
          console.log('üí° ÂèØËÉΩÂéüÂõ†Ôºö');
          console.log('   - Ê¨Ñ‰ΩçÂêçÁ®±‰∏çÂ≠òÂú®ÊñºË≥áÊñô‰∏≠');
          console.log('   - Ë≥áÊñôÊ†ºÂºè‰∏çÊ≠£Á¢∫');
          console.log('   - ÂøÖË¶ÅÊ¨Ñ‰ΩçÁº∫Â§±');
        } else if (response.status === 500) {
          console.error('‚ùå ‰º∫ÊúçÂô®ÈåØË™§Ôºö', responseData);
          console.log('üí° Ê™¢Êü•ÂæåÁ´Ø log ‰ª•Áç≤ÂæóÊõ¥Â§öË≥áË®ä');
        } else {
          console.error('‚ùå ÂÖ∂‰ªñÈåØË™§Ôºö', response.status, responseData);
        }
      }

      // Â¶ÇÊûúÊòØ 401ÔºåË∑≥ÈÅéÊ∏¨Ë©¶
      if (response.status === 401) {
        console.warn('‚ö†Ô∏è Ë∑≥ÈÅéÊ∏¨Ë©¶ÔºöË™çË≠âÂïèÈ°å');
        return;
      }

      expect(response.ok).toBe(true);
      const json = await response.json();

      if (json.success || response.ok) {
        const table = json.table || json.data?.table;

        // Ê™¢Êü•ÊòØÂê¶ÊúâÈÄ≤Ë°åÁµ±Ë®àÊ™¢ÂÆöÔºàÂ°´Ë£úÂæåÊáâË©≤ËÉΩÈÄ≤Ë°åÔºâ
        if (table && Array.isArray(table)) {
          const heightRow = table.find((row: any) =>
            row.Variable === '**Height_cm**' || row.Variable === 'Height_cm'
          );
          const weightRow = table.find((row: any) =>
            row.Variable === '**Weight_kg**' || row.Variable === 'Weight_kg'
          );

          if (heightRow) {
            console.log('Height_cm Áµ±Ë®àÊñπÊ≥ï:', heightRow.Method);
          }
          if (weightRow) {
            console.log('Weight_kg Áµ±Ë®àÊñπÊ≥ï:', weightRow.Method);
          }
        }
      }
    });
  });

  describe('ÈåØË™§ÊÉÖÊ≥ÅÊ∏¨Ë©¶', () => {
    it('ÊáâË©≤ËôïÁêÜÁ©∫Ë≥áÊñôÁöÑÊÉÖÊ≥Å', async () => {
      const requestBody = {
        data: [],
        group_col: null,
        cat_vars: [],
        cont_vars: [],
        fillNA: false
      };

      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestBody)
      });

      if (response.status === 401) {
        console.warn('‚ö†Ô∏è Ë™çË≠âÂïèÈ°åÔºåË∑≥ÈÅéÊ∏¨Ë©¶');
        return;
      }

      const json = await response.json();

      // Á©∫Ë≥áÊñôÂèØËÉΩÂõûÂÇ≥Á©∫Ë°®Ê†ºÊàñÈåØË™§
      if (json.success === false) {
        expect(json.message || json.error || json.detail).toBeDefined();
      } else {
        // ÊàñËÄÖÂõûÂÇ≥Á©∫Ë°®Ê†º
        const table = json.table || json.data?.table;
        expect(Array.isArray(table)).toBe(true);
        if (table) {
          expect(table.length).toBe(0);
        }
      }
    });

    it('ÊáâË©≤ËôïÁêÜÁº∫Â∞ëÂøÖË¶ÅÊ¨Ñ‰ΩçÁöÑÊÉÖÊ≥Å', async () => {
      const requestBody = {
        // Áº∫Â∞ë data Ê¨Ñ‰Ωç
        group_col: 'Group',
        cat_vars: ['Sex'],
        cont_vars: ['Height_cm']
      };

      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestBody)
      });

      if (response.status === 401) {
        console.warn('‚ö†Ô∏è Ë™çË≠âÂïèÈ°åÔºåË∑≥ÈÅéÊ∏¨Ë©¶');
        return;
      }

      expect(response.ok).toBe(false);
      expect(response.status).toBe(422);
    });

    it('ÊáâË©≤ËôïÁêÜÁÑ°ÊïàËÆäÊï∏ÂêçÁ®±ÁöÑÊÉÖÊ≥Å', async () => {
      const requestBody = {
        data: testData,
        group_col: 'InvalidGroup',
        cat_vars: ['InvalidCat1', 'InvalidCat2'],
        cont_vars: ['InvalidCont1', 'InvalidCont2'],
        fillNA: false
      };

      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestBody)
      });

      if (response.status === 401) {
        console.warn('‚ö†Ô∏è Ë™çË≠âÂïèÈ°åÔºåË∑≥ÈÅéÊ∏¨Ë©¶');
        return;
      }

      expect(response.ok).toBe(false);
      const json = await response.json();
      expect(json.success).toBe(false);
      expect(json.message || json.error || json.detail).toBeDefined();
    });

    it('ÊáâË©≤ËôïÁêÜËÆäÊï∏È°ûÂûãÈåØË™§ÁöÑÊÉÖÊ≥Å', async () => {
      const requestBody = {
        data: testData,
        group_col: 'Group',
        // Â∞áÈÄ£Á∫åËÆäÈ†ÖË™§Ê®ôÁÇ∫È°ûÂà•ËÆäÈ†Ö
        cat_vars: ['Height_cm', 'Weight_kg', 'BMI'],
        // Â∞áÈ°ûÂà•ËÆäÈ†ÖË™§Ê®ôÁÇ∫ÈÄ£Á∫åËÆäÈ†Ö  
        cont_vars: ['Sex', 'Smoker'],
        fillNA: false
      };

      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestBody)
      });

      if (response.status === 401) {
        console.warn('‚ö†Ô∏è Ë™çË≠âÂïèÈ°åÔºåË∑≥ÈÅéÊ∏¨Ë©¶');
        return;
      }

      const json = await response.json();

      // API ÊáâË©≤ËÉΩËôïÁêÜ‰∏¶Áµ¶Âá∫Ë≠¶Âëä
      if (json.success || response.ok) {
        const warnings = json.warnings || json.data?.warnings;
        expect(warnings).toBeDefined();
        if (Array.isArray(warnings) && warnings.length > 0) {
          console.log('ËÆäÊï∏È°ûÂûãË≠¶Âëä:', warnings);
        }
      }
    });

    it('ÊáâË©≤ËôïÁêÜ OPTIONS È†êÊ™¢Ë´ãÊ±Ç', async () => {
      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'OPTIONS',
        headers: {
          'Origin': 'http://localhost:3000',
          'Access-Control-Request-Method': 'POST',
          'Access-Control-Request-Headers': 'content-type,authorization'
        }
      });

      expect(response.ok).toBe(true);

      // OPTIONS ÂèØËÉΩÂõûÂÇ≥ÂêÑÁ®ÆÊ†ºÂºè
      const contentType = response.headers.get('content-type');
      if (contentType?.includes('application/json')) {
        const json = await response.json();
        expect(json).toBeDefined();
      } else {
        const text = await response.text();
        expect(text).toBeDefined();
      }
    });
  });

  describe('ÈÇäÁïåÊÉÖÊ≥ÅÊ∏¨Ë©¶', () => {
    it('ÊáâË©≤ËôïÁêÜÂñÆ‰∏ÄË≥áÊñôÂàóÁöÑÊÉÖÊ≥Å', async () => {
      const requestBody = {
        data: [testData[0]],
        group_col: null,
        cat_vars: ['Sex'],
        cont_vars: ['Height_cm'],
        fillNA: false
      };

      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestBody)
      });

      if (response.status === 401) {
        console.warn('‚ö†Ô∏è Ë™çË≠âÂïèÈ°åÔºåË∑≥ÈÅéÊ∏¨Ë©¶');
        return;
      }

      const json = await response.json();

      if (json.success || response.ok) {
        const groupCounts = json.groupCounts || json.data?.groupCounts;
        const table = json.table || json.data?.table;

        if (groupCounts) {
          expect(groupCounts.All).toBe(1);
        }

        // ÂñÆ‰∏ÄË≥áÊñôÂàóÁÑ°Ê≥ïÈÄ≤Ë°åÁµ±Ë®àÊ™¢ÂÆö
        if (table && Array.isArray(table)) {
          table.forEach((row: any) => {
            if (row.Method) {
              expect(row.Method).toBe('‚Äî');
            }
          });
        }
      }
    });

    it('ÊáâË©≤ËôïÁêÜÂ§ßÈáèËÆäÈ†ÖÁöÑÊÉÖÊ≥Å', async () => {
      // ‰ΩøÁî®ÊâÄÊúâÂèØÁî®ÁöÑÊ¨Ñ‰Ωç
      const allColumns = Object.keys(testData[0]);
      const catVars = ['Sex', 'Group', 'Region', 'Smoker'];
      const contVars = allColumns.filter(col =>
        !catVars.includes(col) &&
        col !== 'Date' &&
        col !== 'Visit_Date'
      );

      const requestBody = {
        data: testData,
        group_col: 'Group',
        cat_vars: catVars,
        cont_vars: contVars,
        fillNA: false
      };

      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestBody)
      });

      if (response.status === 401) {
        console.warn('‚ö†Ô∏è Ë™çË≠âÂïèÈ°åÔºåË∑≥ÈÅéÊ∏¨Ë©¶');
        return;
      }

      expect(response.ok).toBe(true);
      const json = await response.json();

      if (json.success || response.ok) {
        const table = json.table || json.data?.table;
        // ÊáâË©≤ÊúâÊâÄÊúâËÆäÈ†ÖÁöÑÂàÜÊûêÁµêÊûú
        if (table && Array.isArray(table)) {
          const variableCount = catVars.length + contVars.length;
          console.log(`ÂàÜÊûêËÆäÈ†ÖÊï∏: ${variableCount}, Ë°®Ê†ºÂàóÊï∏: ${table.length}`);
          expect(table.length).toBeGreaterThan(0);
        }
      }
    }, 30000);
  });
});