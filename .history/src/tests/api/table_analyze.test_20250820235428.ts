// src/tests/api/table_analyze.test.ts
import { describe, it, expect, beforeAll } from 'vitest';
import { TableAnalyzeResponse } from '@/schemas/apiContracts';
import fs from 'fs';
import path from 'path';

const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8001';

async function getTestToken(): Promise<string> {
  if (process.env.TEST_AUTH_TOKEN) {
    return process.env.TEST_AUTH_TOKEN;
  }
  return 'test-token-for-development';
}

// ... parseCSV Âíå loadTestData ÂáΩÊï∏Áõ∏Âêå ...

describe('Table Analyze API Tests', () => {
  let testData: any[];
  let authToken: string;

  beforeAll(async () => {
    try {
      testData = loadTestData();
      authToken = await getTestToken();
      console.log(`‚úÖ ÊàêÂäüËºâÂÖ•Ê∏¨Ë©¶Ë≥áÊñô: ${testData.length} Á≠Ü`);
    } catch (error) {
      console.error('‚ùå ËºâÂÖ•Ê∏¨Ë©¶Ë≥áÊñôÂ§±Êïó:', error);
      throw error;
    }
  });

  describe('Ê≠£Â∏∏ÊÉÖÊ≥ÅÊ∏¨Ë©¶', () => {
    it('ÊáâË©≤ÊàêÂäüÂü∑Ë°åÂü∫Êú¨ÁöÑÁµ±Ë®àÂàÜÊûê', async () => {
      const requestBody = {
        data: testData,
        group_col: 'Group',
        cat_vars: ['Sex', 'Region', 'Smoker'],
        cont_vars: ['Height_cm', 'Weight_kg', 'BMI', 'Cholesterol'],
        fillNA: false,
        enableExport: false,
        enableAI: false
      };

      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestBody)
      });

      console.log('üì• ÂõûÊáâÁãÄÊÖã:', response.status);

      if (!response.ok) {
        const contentType = response.headers.get('content-type');
        if (contentType?.includes('application/json')) {
          const errorInfo = await response.json();
          console.error('‚ùå API ÈåØË™§:', errorInfo);
        } else {
          const errorText = await response.text();
          console.error('‚ùå API ÈåØË™§ (Text):', errorText);
        }
        
        if (response.status === 401) {
          console.warn('‚ö†Ô∏è Ë™çË≠âÂ§±ÊïóÔºåË∑≥ÈÅéÊ≠§Ê∏¨Ë©¶');
          return;
        }
      }

      expect(response.ok).toBe(true);
      const json = await response.json();
      
      console.log('ÂõûÊáâ keys:', Object.keys(json));
      
      // Ê™¢Êü•Âü∫Êú¨ÁµêÊßã
      expect(json).toBeDefined();
      
      // Ê†πÊìöÂØ¶Èöõ API ÂõûÊáâÁµêÊßãË™øÊï¥
      if (json.success !== undefined) {
        expect(json.success).toBe(true);
      }
      
      // Ê™¢Êü• table Âíå groupCountsÔºàÂèØËÉΩÊòØ flattenedÔºâ
      expect(json.table || json.data?.table).toBeDefined();
      expect(json.groupCounts || json.data?.groupCounts).toBeDefined();
      
      const table = json.table || json.data?.table;
      const groupCounts = json.groupCounts || json.data?.groupCounts;
      
      if (table && table.length > 0) {
        const firstRow = table[0];
        expect(firstRow).toHaveProperty('Variable');
        expect(firstRow).toHaveProperty('P');
        expect(firstRow).toHaveProperty('Method');
      }
      
      if (groupCounts) {
        expect(groupCounts.All).toBeDefined();
        console.log('ÂàÜÁµÑÁµ±Ë®à:', groupCounts);
      }
    }, 30000);
  });

  describe('ÈåØË™§ÊÉÖÊ≥ÅÊ∏¨Ë©¶', () => {
    it('ÊáâË©≤ËôïÁêÜÁ©∫Ë≥áÊñôÁöÑÊÉÖÊ≥Å', async () => {
      const requestBody = {
        data: [],
        group_col: null,
        cat_vars: [],
        cont_vars: [],
        fillNA: false
      };

      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`
        },
        body: JSON.stringify(requestBody)
      });

      if (response.status === 401) {
        console.warn('‚ö†Ô∏è Ë™çË≠âÂïèÈ°åÔºåË∑≥ÈÅéÊ∏¨Ë©¶');
        return;
      }

      const json = await response.json();
      
      // Á©∫Ë≥áÊñôÂèØËÉΩÂõûÂÇ≥Á©∫Ë°®Ê†ºÊàñÈåØË™§
      if (json.success === false) {
        expect(json.message || json.error).toBeDefined();
      } else {
        // ÊàñËÄÖÂõûÂÇ≥Á©∫Ë°®Ê†º
        const table = json.table || json.data?.table;
        expect(table).toEqual([]);
      }
    });

    it('ÊáâË©≤ËôïÁêÜ OPTIONS È†êÊ™¢Ë´ãÊ±Ç', async () => {
      const response = await fetch(`${API_BASE}/api/table/table-analyze`, {
        method: 'OPTIONS',
        headers: {
          'Origin': 'http://localhost:3000',
          'Access-Control-Request-Method': 'POST',
          'Access-Control-Request-Headers': 'content-type,authorization'
        }
      });

      expect(response.ok).toBe(true);
      
      // OPTIONS ÂèØËÉΩÂõûÂÇ≥ÂêÑÁ®ÆÊ†ºÂºè
      const contentType = response.headers.get('content-type');
      if (contentType?.includes('application/json')) {
        const json = await response.json();
        expect(json).toBeDefined();
      } else {
        const text = await response.text();
        expect(text).toBeDefined();
      }
    });
  });
});